name: Terraform — Azure Deploy (Windows, Auto Apply)

on:
  push:
    branches:
      - main

env:
  TF_WORKING_DIR: '.'
  TF_PLAN_FILE: 'tfplan.bin'

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: windows-latest
    permissions:
      contents: read
      id-token: write

    steps:
      # -----------------------
      # Checkout Repo
      # -----------------------
      - name: Checkout repo
        uses: actions/checkout@v4

      # -----------------------
      # Check Module Folders
      # -----------------------
      - name: Validate Module Folders Exist
        shell: pwsh
        run: |
          if (-not (Test-Path -Path "./modules/vnet")) {
            Write-Error "❌ Module folder ./modules/vnet does not exist!"
            exit 1
          }
          if (-not (Test-Path -Path "./modules/windows-vm")) {
            Write-Error "❌ Module folder ./modules/windows-vm does not exist!"
            exit 1
          }
          Write-Host "✅ All module folders exist."

      # -----------------------
      # List Workspace and Modules
      # -----------------------
      - name: List Files in Working Directory
        shell: pwsh
        run: dir -Recurse

      - name: List Modules Folder
        shell: pwsh
        run: dir .\modules

      # -----------------------
      # Setup Terraform
      # -----------------------
      - name: Setup Terraform (latest)
        uses: hashicorp/setup-terraform@v2

      # -----------------------
      # Azure Login
      # -----------------------
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # -----------------------
      # Terraform Init (Local State)
      # -----------------------
      - name: Terraform Init (Local State)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -reconfigure

      # -----------------------
      # Print Variables
      # -----------------------
      - name: Print Terraform Variables
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $vars = @{
            "resource_group_name" = "vnet1-rg"
            "location" = "Canada Central"
            "vnet_name" = "vnet1"
            "subnet_name" = "vnet1-subnet"
            "admin_username" = "azureuser"
            "subscription_id" = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          }
          Write-Host "=== Terraform Variables ==="
          $vars.GetEnumerator() | ForEach-Object { Write-Host "$($_.Key) = $($_.Value)" }

      # -----------------------
      # Terraform Format & Validate
      # -----------------------
      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      # -----------------------
      # Terraform Plan
      # -----------------------
      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -out=${{ env.TF_PLAN_FILE }} `
            -var="admin_password=${{ secrets.ADMIN_PASSWORD }}" `
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -input=false

      # -----------------------
      # Show Plan (Text)
      # -----------------------
      - name: Show Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform show ${{ env.TF_PLAN_FILE }}

      # -----------------------
      # Save Plan JSON and Upload
      # -----------------------
      - name: Save Terraform Plan JSON
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform show -json ${{ env.TF_PLAN_FILE }} > plan.json

      - name: Upload plan.json
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: plan.json

      # -----------------------
      # Fail If Plan Has 0 Resources
      # -----------------------
      - name: Fail If No Resources to Create
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $planJson = Get-Content -Raw plan.json | ConvertFrom-Json
          $resources = $planJson.resource_changes
          if ($null -eq $resources -or $resources.Count -eq 0) {
            Write-Error "❌ Terraform plan contains 0 resources. Check modules folder and variable values!"
            exit 1
          } else {
            Write-Host "✅ Terraform plan contains $($resources.Count) resource(s) to create/change."
          }

      # -----------------------
      # Terraform Apply
      # -----------------------
      - name: Terraform Apply (Auto)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve ${{ env.TF_PLAN_FILE }}

      # -----------------------
      # Debug Terraform State & Outputs
      # -----------------------
      - name: Debug Terraform State & Outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "--- State list ---"
          terraform state list || echo "⚠️ No state found"
          echo "--- Outputs ---"
          terraform output || echo "⚠️ No outputs found"

      # -----------------------
      # Validate Subnet Output
      # -----------------------
      - name: Validate Subnet Output
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $subnetId = terraform output -raw subnet_id
          if ([string]::IsNullOrEmpty($subnetId)) {
            Write-Error "❌ ERROR: subnet_id output from VNet module is empty! VM cannot be created."
            exit 1
          } else {
            Write-Host "✅ Subnet ID found: $subnetId"
          }

      # -----------------------
      # Show VM Outputs
      # -----------------------
      - name: Show VM Outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $vmId = terraform output -raw vm_id
          $vmPrivateIP = terraform output -raw vm_private_ip
          $vmPublicIP = terraform output -raw vm_public_ip
          Write-Host "✅ VM ID: $vmId"
          Write-Host "✅ VM Private IP: $vmPrivateIP"
          Write-Host "✅ VM Public IP: $vmPublicIP"
