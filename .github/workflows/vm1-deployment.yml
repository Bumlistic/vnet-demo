name: Terraform ‚Äî Azure Deploy (Windows, Auto Apply)

on:
  push:
    branches:
      - main

env:
  TF_WORKING_DIR: '.'
  TF_PLAN_FILE: 'tfplan.bin'

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: windows-latest
    permissions:
      contents: read
      id-token: write

    steps:
      # ---------------------------
      # Checkout code
      # ---------------------------
      - name: Checkout repo
        uses: actions/checkout@v4

      # ---------------------------
      # Setup Terraform
      # ---------------------------
      - name: Setup Terraform (latest)
        uses: hashicorp/setup-terraform@v2

      # ---------------------------
      # Azure Login
      # ---------------------------
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # ---------------------------
      # Terraform Init
      # ---------------------------
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init `
            -backend-config="resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP }}" `
            -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}" `
            -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER }}" `
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}" `
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      # ---------------------------
      # Format & Validate
      # ---------------------------
      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      # ---------------------------
      # Check Secrets
      # ---------------------------
      - name: Debug Secrets
        shell: pwsh
        run: |
          $env:ADMIN_PASSWORD = "${{ secrets.ADMIN_PASSWORD }}"
          if ([string]::IsNullOrEmpty($env:ADMIN_PASSWORD)) {
              Write-Error "‚ùå ERROR: ADMIN_PASSWORD is empty or missing!"
              exit 1
          } else {
              Write-Host "‚úÖ ADMIN_PASSWORD is set."
          }

      # ---------------------------
      # Check Outputs
      # ---------------------------
      - name: Terraform Output Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $env:ADMIN_PASSWORD = "${{ secrets.ADMIN_PASSWORD }}"
          terraform refresh -var="admin_password=${env:ADMIN_PASSWORD}" -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          Write-Host "`n--- Terraform Outputs ---"
          $outputsJson = terraform output -json
          $outputs = $outputsJson | ConvertFrom-Json
          foreach ($key in $outputs.PSObject.Properties.Name) {
              $value = $outputs.PSObject.Properties[$key].Value.value
              Write-Host "${key}: ${value}"
          }

      # ---------------------------
      # Validate Subnet ID (needed for VM)
      # ---------------------------
      - name: Validate Subnet ID Output
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $subnetId = terraform output -raw subnet_id
          if ([string]::IsNullOrEmpty($subnetId)) {
              Write-Error "‚ùå ERROR: subnet_id output from VNet module is empty! VM cannot be created."
              exit 1
          } else {
              Write-Host "‚úÖ Subnet ID is valid: ${subnetId}"
          }

      # ---------------------------
      # Terraform Plan
      # ---------------------------
      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $env:ADMIN_PASSWORD = "${{ secrets.ADMIN_PASSWORD }}"
          terraform plan -out=${{ env.TF_PLAN_FILE }} `
            -var="admin_password=${env:ADMIN_PASSWORD}" `
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -input=false

          Write-Host "`n--- Planned Resources ---"
          $planJson = terraform show -json ${{ env.TF_PLAN_FILE }}
          $plan = $planJson | ConvertFrom-Json
          foreach ($res in $plan.planned_values.root_module.resources) {
              Write-Host "üì¶ Resource Type: $($res.type), Name: $($res.name)"
          }

      # ---------------------------
      # Terraform State (before apply)
      # ---------------------------
      - name: Terraform State List
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform state list || Write-Host "‚ÑπÔ∏è No resources in state yet."

      # ---------------------------
      # Terraform Apply
      # ---------------------------
      - name: Terraform Apply (Auto)
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $env:ADMIN_PASSWORD = "${{ secrets.ADMIN_PASSWORD }}"
          terraform apply -auto-approve ${{ env.TF_PLAN_FILE }}

      # ---------------------------
      # Show VM Public IP
      # ---------------------------
      - name: Display VM Public IP
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $vmPublicIp = terraform output -raw vm_public_ip
          if ([string]::IsNullOrEmpty($vmPublicIp)) {
              Write-Host "‚ùå VM public IP not found (VM may not have been created)."
          } else {
              Write-Host "üåç VM Public IP: ${vmPublicIp}"
          }
