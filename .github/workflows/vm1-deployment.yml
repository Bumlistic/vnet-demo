name: "Terraform — Azure Deploy (Debug & Apply with Extra Logging)"

on:
  push:
    branches:
      - main

env:
  TF_WORKING_DIR: '.'            # Root directory containing Terraform root .tf files
  TF_PLAN_FILE: 'tfplan.bin'     # Name of the plan output file

jobs:
  terraform:
    name: Plan & Apply with Debug Logging
    runs-on: windows-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate module directories
        shell: pwsh
        run: |
          Write-Host "Checking modules/vnet & modules/windows-vm"
          if (-not (Test-Path "./modules/vnet")) {
            Write-Error "❌ Module folder ./modules/vnet does not exist!"
            exit 1
          }
          if (-not (Test-Path "./modules/windows-vm")) {
            Write-Error "❌ Module folder ./modules/windows-vm does not exist!"
            exit 1
          }
          Write-Host "✅ Module directories present."

      - name: Debug file structure at start
        shell: pwsh
        run: |
          Write-Host "=== Initial workspace directory listing ==="
          dir .\ -Recurse
          Write-Host "=== modules directory listing ==="
          dir .\modules -Recurse

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Clean Terraform cache
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          if (Test-Path .terraform) {
            Remove-Item -Recurse -Force .terraform
          }
          if (Test-Path .terraform.lock.hcl) {
            Remove-Item .terraform.lock.hcl
          }
          Write-Host "✅ Cleaned Terraform cache."

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: terraform init -reconfigure

      - name: Post‑init modules directory listing
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          Write-Host "=== After init: modules directory ==="
          dir .\modules -Recurse

      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan with logging
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          Write-Host "=== Before plan: listing directory ==="
          dir .\ -Recurse
          & terraform plan "-out=${{ env.TF_PLAN_FILE }}" "-var=admin_password=${{ secrets.ADMIN_PASSWORD }}" "-var=subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" "-input=false"
          $last = $LASTEXITCODE
          Write-Host "Terraform plan exit code: $last"
          Write-Host "=== After plan: listing directory ==="
          dir .\ -Recurse
          if (-not (Test-Path ${{ env.TF_PLAN_FILE }})) {
            Write-Error "❌ Plan file ${{ env.TF_PLAN_FILE }} not found!"
            exit 1
          } else {
            Write-Host "✅ Plan file exists: ${{ env.TF_PLAN_FILE }}"
          }

      - name: Show Terraform Plan (text)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform show ${TF_PLAN_FILE}

      - name: Export Plan JSON
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform show -json ${TF_PLAN_FILE} > plan.json

      - name: Check plan.json existence & size
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          Write-Host "=== After show JSON: listing plan.json ==="
          dir .\ -Filter plan.json -Recurse
          $fi = Get-Item -Path plan.json -ErrorAction SilentlyContinue
          if ($null -eq $fi) {
            Write-Error "❌ plan.json not found!"
            exit 1
          }
          if ($fi.Length -eq 0) {
            Write-Error "❌ plan.json exists but is empty (0 bytes)!"
            exit 1
          }
          Write-Host "✅ plan.json is present and non‑empty (size = $($fi.Length) bytes)."

      - name: Upload plan.json artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-json
          path: plan.json
          if-no-files-found: error

      - name: Inspect Plan JSON Summary
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $json = Get-Content -Raw plan.json | ConvertFrom-Json
          Write-Host "===== Plan JSON Summary ====="
          if ($null -eq $json.module_calls) {
            Write-Host "module_calls is null or empty"
          } else {
            Write-Host "Modules recognized: " + ($json.module_calls.Keys -join ", ")
          }
          if ($null -eq $json.resource_changes) {
            Write-Host "resource_changes is null or empty"
          } else {
            Write-Host "Number of resource_changes: $($json.resource_changes.Count)"
            foreach ($rc in $json.resource_changes) {
              Write-Host (" • Address: $($rc.address) | Actions: " + ($rc.change.actions -join ", "))
            }
          }

      - name: Terraform Apply (Conditional)
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $json = Get-Content -Raw plan.json | ConvertFrom-Json
          if ($null -eq $json.resource_changes -or $json.resource_changes.Count -eq 0) {
            Write-Host "ℹ️ No resource changes detected; skipping apply."
            exit 0
          } else {
            terraform apply -auto-approve ${TF_PLAN_FILE}
          }

      - name: Debug State & Outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "--- Terraform State List ---"
          terraform state list || echo "(no state)"
          echo "--- Terraform Outputs ---"
          terraform output || echo "(no outputs)"

      - name: Dump All Outputs JSON
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          Write-Host "=== Terraform outputs (JSON) ==="
          $raw = terraform output -json
          if ($raw) {
            $obj = $raw | ConvertFrom-Json
            $obj | ConvertTo-Json -Depth 5
          } else {
            Write-Host "No outputs returned (raw JSON empty)."
          }

      - name: Validate subnet_id output
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $subnetId = terraform output -raw subnet_id 2>$null
          Write-Host "Subnet ID (raw): '$subnetId'"
          if ([string]::IsNullOrEmpty($subnetId)) {
            Write-Error "❌ subnet_id output is empty — VNet module may not have been created or output defined incorrectly."
            exit 1
          } else {
            Write-Host "✅ Subnet ID: $subnetId"
          }

      - name: Show VM Outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          Write-Host "=== VM Outputs ==="
          $vmId = terraform output -raw vm_id 2>$null
          $vmPriv = terraform output -raw vm_private_ip 2>$null
          $vmPub = terraform output -raw vm_public_ip 2>$null
          Write-Host "VM ID: '$vmId'"
          Write-Host "VM Private IP: '$vmPriv'"
          Write-Host "VM Public IP: '$vmPub'"
