name: Terraform — Azure Deploy (Windows, Auto Apply)

on:
  push:
    branches:
      - main

env:
  TF_WORKING_DIR: '.'
  TF_PLAN_FILE: 'tfplan.bin'

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: windows-latest
    permissions:
      contents: read
      id-token: write

    steps:
      # -----------------------
      # Checkout Repo
      # -----------------------
      - name: Checkout repo
        uses: actions/checkout@v4

      # -----------------------
      # Setup Terraform
      # -----------------------
      - name: Setup Terraform (latest)
        uses: hashicorp/setup-terraform@v2

      # -----------------------
      # Azure Login
      # -----------------------
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # -----------------------
      # Terraform Init
      # -----------------------
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init `
            -backend-config="resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP }}" `
            -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}" `
            -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER }}" `
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}" `
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      # -----------------------
      # Terraform Format & Validate
      # -----------------------
      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      # -----------------------
      # Terraform Plan
      # -----------------------
      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -out=${{ env.TF_PLAN_FILE }} `
            -var="admin_password=${{ secrets.ADMIN_PASSWORD }}" `
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -input=false

      # Optional: Show plan JSON for debugging
      - name: Debug Terraform Plan JSON
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform show -json ${{ env.TF_PLAN_FILE }} > plan.json

      # -----------------------
      # Terraform Apply
      # -----------------------
      - name: Terraform Apply (Auto)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve ${{ env.TF_PLAN_FILE }}

      # -----------------------
      # Debug Terraform State & Outputs
      # -----------------------
      - name: Debug Terraform State & Outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "--- State list ---"
          terraform state list || echo "⚠️ No state found"
          echo "--- Outputs ---"
          terraform output || echo "⚠️ No outputs found"

      # -----------------------
      # Subnet Validation
      # -----------------------
      - name: Validate Subnet Output
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $subnetId = terraform output -raw subnet_id
          if ([string]::IsNullOrEmpty($subnetId)) {
            Write-Error "❌ ERROR: subnet_id output from VNet module is empty! VM cannot be created."
            exit 1
          } else {
            Write-Host "✅ Subnet ID found: $subnetId"
          }
