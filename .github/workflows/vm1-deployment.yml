name: Terraform â€” Azure Deploy (Windows, Auto Apply)

on:
  push:
    branches:
      - main

env:
  TF_WORKING_DIR: '.'
  TF_PLAN_FILE: 'tfplan.bin'

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: windows-latest
    permissions:
      contents: read
      id-token: write

    steps:
      # ---------------------------
      # Checkout code
      # ---------------------------
      - name: Checkout repo
        uses: actions/checkout@v4

      # ---------------------------
      # Setup Terraform
      # ---------------------------
      - name: Setup Terraform (latest)
        uses: hashicorp/setup-terraform@v2

      # ---------------------------
      # Azure Login
      # ---------------------------
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # ---------------------------
      # Terraform Init
      # ---------------------------
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init `
            -backend-config="resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP }}" `
            -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}" `
            -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER }}" `
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}" `
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      # ---------------------------
      # Format Check
      # ---------------------------
      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      # ---------------------------
      # Validate Terraform
      # ---------------------------
      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      # ---------------------------
      # Debug: Check ADMIN_PASSWORD secret
      # ---------------------------
      - name: Debug Secrets
        shell: pwsh
        run: |
          if (-not ${{ secrets.ADMIN_PASSWORD }}) {
            Write-Host "ERROR: ADMIN_PASSWORD is empty!"
            exit 1
          } else {
            Write-Host "ADMIN_PASSWORD is set."
          }

      # ---------------------------
      # Terraform Output Check
      # ---------------------------
      - name: Terraform Output Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $env:ADMIN_PASSWORD = "${{ secrets.ADMIN_PASSWORD }}"
          terraform refresh -var="admin_password=$env:ADMIN_PASSWORD" -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          Write-Host "`n--- Terraform Outputs ---"
          terraform output -json | ConvertFrom-Json | ForEach-Object {
            Write-Host "$($_.Key): $($_.Value.value)"
          }

      # ---------------------------
      # Pre-flight Check: Ensure subnet_id exists
      # ---------------------------
      - name: Validate Subnet ID Output
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $env:ADMIN_PASSWORD = "${{ secrets.ADMIN_PASSWORD }}"
          terraform refresh -var="admin_password=$env:ADMIN_PASSWORD" -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          $subnetId = terraform output -raw subnet_id
          if ([string]::IsNullOrEmpty($subnetId)) {
              Write-Host "ERROR: subnet_id output from VNet module is empty!"
              Write-Host "Cannot create VM without a valid subnet."
              exit 1
          } else {
              Write-Host "Subnet ID is valid: $subnetId"
          }

      # ---------------------------
      # Terraform Plan
      # ---------------------------
      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $env:ADMIN_PASSWORD = "${{ secrets.ADMIN_PASSWORD }}"
          terraform plan -out=${{ env.TF_PLAN_FILE }} `
            -var="admin_password=$env:ADMIN_PASSWORD" `
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -input=false

          Write-Host "`n--- Planned Resources ---"
          terraform show -json ${{ env.TF_PLAN_FILE }} | ConvertFrom-Json | ForEach-Object {
            $_.planned_values.root_module.resources | ForEach-Object {
              Write-Host "Resource Type: $($_.type), Name: $($_.name)"
            }
          }

      # ---------------------------
      # Terraform State List
      # ---------------------------
      - name: Terraform State List
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform state list || Write-Host "No resources in state yet."

      # ---------------------------
      # Terraform Apply
      # ---------------------------
      - name: Terraform Apply (Auto)
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $env:ADMIN_PASSWORD = "${{ secrets.ADMIN_PASSWORD }}"
          terraform apply -auto-approve ${{ env.TF_PLAN_FILE }}
