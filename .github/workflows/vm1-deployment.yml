name: "Terraform — Azure Deploy (Windows, Auto Apply)"

on:
  push:
    branches:
      - main

env:
  TF_WORKING_DIR: '.'          # Terraform root directory (adjust if your tf files live in a subfolder)
  TF_PLAN_FILE: 'tfplan.bin'

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: windows-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate module directories
        shell: pwsh
        run: |
          if (-not (Test-Path "./modules/vnet")) {
            Write-Error "❌ Module folder ./modules/vnet does not exist!"
            exit 1
          }
          if (-not (Test-Path "./modules/windows-vm")) {
            Write-Error "❌ Module folder ./modules/windows-vm does not exist!"
            exit 1
          }
          Write-Host "✅ Module directories confirmed"

      - name: Debug workspace snapshot
        shell: pwsh
        run: |
          Write-Host "=== Files in working directory ==="
          dir -Recurse

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Clean Terraform cache
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          if (Test-Path .terraform) { Remove-Item -Recurse -Force .terraform }
          if (Test-Path .terraform.lock.hcl) { Remove-Item .terraform.lock.hcl }
      
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -reconfigure

      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -out=${{ env.TF_PLAN_FILE }} `
            -var="admin_password=${{ secrets.ADMIN_PASSWORD }}" `
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -input=false

      - name: Show Terraform Plan (text)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform show ${TF_PLAN_FILE}

      - name: Export Plan JSON
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform show -json ${TF_PLAN_FILE} > plan.json

      - name: Upload plan.json
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: plan.json

      - name: Inspect Plan JSON (non-fatal)
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $planJson = Get-Content -Raw plan.json | ConvertFrom-Json
          $resources = $planJson.resource_changes
          Write-Host "Detected resource change count: $($resources?.Count ?? 0)"
          # (Don't error out here — just log) 

      # Only apply if there *is* something to do
      - name: Terraform Apply (if changes exist)
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $planJson = Get-Content -Raw plan.json | ConvertFrom-Json
          if ($null -eq $planJson.resource_changes -or $planJson.resource_changes.Count -eq 0) {
            Write-Host "ℹ️ No resource changes. Skipping apply."
            exit 0
          } else {
            terraform apply -auto-approve ${TF_PLAN_FILE}
          }

      - name: Debug Outputs & State
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "--- Terraform State ---"
          terraform state list || echo "⚠️ No state resources"
          echo "--- Outputs ---"
          terraform output || echo "⚠️ No outputs found"

      - name: Validate Subnet Output
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $subnetId = terraform output -raw subnet_id
          if ([string]::IsNullOrEmpty($subnetId)) {
            Write-Error "❌ subnet_id output is empty — VNet module may not have been created"
            exit 1
          } else {
            Write-Host "✅ Subnet ID: $subnetId"
          }

      - name: Display VM Outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          $vmId = terraform output -raw vm_id
          $vmPriv = terraform output -raw vm_private_ip
          $vmPub = terraform output -raw vm_public_ip
          Write-Host "✅ VM ID: $vmId"
          Write-Host "✅ VM Private IP: $vmPriv"
          Write-Host "✅ VM Public IP: $vmPub"
