name: "Terraform â€” Azure Destroy (OIDC Backend)"

on:
  workflow_dispatch:   # manual trigger only

env:
  TF_WORKING_DIR: '.'
  TF_PLAN_FILE: 'tfplan-destroy.bin'

jobs:
  terraform-destroy:
    name: Plan & Destroy
    runs-on: windows-latest
    permissions:
      contents: read
      id-token: write     # required for OIDC

    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.13.3'
          terraform_wrapper: false

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init (remote backend via AAD)
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          terraform init -reconfigure `
            -backend-config="use_azuread_auth=true" `
            -backend-config="resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP }}" `
            -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}" `
            -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER }}" `
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}"

      # ðŸ‘‡ Debug: Show backend info & providers
      - name: Show Backend & Providers
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          Write-Host '--- Backend Config ---'
          terraform providers

      # ðŸ‘‡ Check what state Terraform sees
      - name: Show Current State
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          Write-Host '--- Terraform State List ---'
          terraform state list || Write-Host '(no state)'

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: terraform validate

      - name: Terraform Plan Destroy (save planfile)
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: |
          terraform plan -destroy `
            -out="${{ env.TF_PLAN_FILE }}" `
            -input=false `
            -var="admin_password=${{ secrets.ADMIN_PASSWORD }}" `
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Show Destroy Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: terraform show "${{ env.TF_PLAN_FILE }}"

      - name: Terraform Destroy Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        shell: pwsh
        run: terraform apply -auto-approve "${{ env.TF_PLAN_FILE }}"
