name: Terraform — Azure Deploy (Windows, Auto Apply)

on:
  push:
    branches:
      - main

env:
  TF_WORKING_DIR: '.'
  TF_PLAN_FILE: 'tfplan.bin'

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: windows-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform (latest)
        uses: hashicorp/setup-terraform@v2
        # No terraform_version specified → installs latest release

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init `
            -backend-config="resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP }}" `
            -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}" `
            -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER }}" `
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}" `
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -out=${{ env.TF_PLAN_FILE }} `
            -var="admin_password=${{ secrets.ADMIN_PASSWORD }}" `
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -input=false

      - name: Terraform Apply (Auto)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve ${{ env.TF_PLAN_FILE }}
